/** Declaration file generated by dts-gen */

export default class BasicAuthenticator {
  /**
   * Represents an authenticator Object
   * @constructor
   * @param {Object} request HTTP request - Object
   * @param {Object} response HTTP response - Object
   * @param {Object} loginOptions - Object literal structure of key:value pairs for login options, optional
   * @param {Object} logoutOptions - Object literal structure of key:value pairs for logout options, optional
   */
  constructor(
    request: Object,
    response: Object,
    loginOptions?: Object,
    logoutOptions?: Object
  );

  /**
   * Constructs and returns a login URL
   * @param {Object} options - Object literal structure of key:value pairs merged with class default login options
   * @returns {string}
   */
  buildLoginURL(options?: Object): string;

  /**
   * Construct and returns a logout URL
   * @function
   * @param {Object} options - Object literal structure of key:value pairs merged with class default logout options
   * @returns {string}
   */
  buildLogoutURL(options?: Object): string;

  /**
   * Returns the configured attribute access method
   * @function
   * @returns {string} UMN_ATTRS_FROM_ENV | UMN_ATTRS_FROM_HEADERS
   */
  getAttributeAccessMethod(): "UMN_ATTRS_FROM_ENV" | "UMN_ATTRS_FROM_HEADERS";

  /**
   * Returns an array of the parameter array joined with the class default attribute names
   * @function
   * @returns {Array}
   */
  getAttributeNames(requestedAttributes: Array): any;

  /**
   * Return the scalar value of the requested attribute, based on the HTTP header or environment attribute source
   * Returns null if the attribute does not exist
   * @function
   * @param {string} name - Name of the attribute to return
   */
  getAttributeValue(name: string): any;

  /**
   * Returns an Array of values from a multi-value attribute string, split on the custom delimiter or semicolon (;)
   * @function
   * @param {string} name - Name of the attribute to return
   * @param {string} delimiter - Multi-value delimiter, default is semicolon (;)
   * @returns {string[]} - Array of values
   */
  getAttributeValues(name: string, delimiter: string): string[];

  /**
   * Return an Array of attribute values (like getAttributeValue() but returns many at once)
   * Note: Multi-value, delimited attributes will not be split.
   * @function
   * @param {Array} requestedAttributes - Array of attribute names to retrieve
   * @returns {Object} Object literal structure of key:value pairs
   */
  getAttributes(requestedAttributes: string[]): Object;

  /**
   * Return an Object of requested attributes, or redirect to login if no session is active
   * @function
   * @param {Object} options - Login options, passed to buildLoginURL()
   * @param {Array} requestedAttributes - Attributes to return in Object
   * @param {number} maxAge - number of seconds to consider session valid, overriding SP & IdP defaults
   * @returns {Object} Object literal structure of requested attributes, or redirects to login
   */
  getAttributesOrRequestLogin(
    options: Object,
    requestedAttributes: string[],
    maxAge: number
  ): Object;

  /**
   * Returns an array of the default attributes supplied by the class
   * @function
   * @returns {string[]}
   */
  getDefaultAttributeNames(): string[];

  /**
   * Return the Identity Provider's entity ID
   * @function
   * @returns {string}
   */
  getIdpEntityId(): string;
  /**
   * Returns true if a Shibboleth session is active
   * @function
   * @returns {Boolean}
   */
  hasSession(): Boolean;

  /**
   * Returns true if the Shibboleth session does not exist, or has expired based on maxAge
   * @function
   * @param {number} maxAge - Maximum seconds since login to consider a session active
   * @returns {boolean}
   */
  hasSessionTimedOut(maxAge: boolean): boolean;

  /**
   * Return a Date object representing the time the user logged in
   * @returns {Date}
   */
  loggedInSince(): Date;

  /**
   * Returns true if the user logged in with Duo 2factor method
   * @function
   * @returns {boolean}
   */
  loggedInWithDuo(): boolean;

  /**
   * Returns true if the user logged in with a 2factor method
   * @function
   * @returns {boolean}
   */
  loggedInWithMKey(): boolean;

  /**
   * Normalize an attribute name for use with either HTTP headers or environment variables
   * as the attribute source
   * @function
   * @param {string} name - Attribute name to normalize
   * @returns {string}
   */
  normalizeAttributeName(name: string): string;

  /**
   * Redirects to a login URL constructed by buildLoginURL()
   * @function
   * @param {Object} options - Object literal structure of key:value pairs merged with class default logout options
   * @returns {void}
   */
  redirectToLogin(options?: Object): void;

  /**
   * Redirect to the logout handler
   * @function
   * @param {Object} options - Logout options, passed to buildLogoutURL()
   */
  redirectToLogout(options?: Object): void;

  /**
   * Set the attribute access method.
   * @function
   * @param {string} method - Attribute access method. Valid values are UMN_ATTRS_FROM_ENV | UMN_ATTRS_FROM_HEADERS
   */
  setAttributeAccessMethod(
    method: "UMN_ATTRS_FROM_ENV" | "UMN_ATTRS_FROM_HEADERS"
  ): void;

  /**
   * Set the authenticator handler URL (default /Shibboleth.sso)
   * @function
   * @param {string} newHandlerURL - The new handler URL, including leading /
   */
  setHandlerURL(newHandlerURL: string): void;
}
